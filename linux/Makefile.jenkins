#
# Start a build from Jenkins.
#
# Jenkins job passes in BUILD_OS, BUILD_ARCH, BUILD_NUMBER, and
# optionally BUILD_DIST.
#

include macros.mk

$(call varchklist_call,BUILD_OS BUILD_ARCH BUILD_NUMBER)

Package = iptables-daddr

MOCK ?= mock

uniqid   = $(Package)-$(BUILD_OS)-$(BUILD_ARCH)
builddir = $(CURDIR)/mock/build-$(uniqid)
topdir   = $(builddir)

ifdef BUILD_DIST
  dist = .$(BUILD_DIST)
endif

target_arch = $(BUILD_ARCH)

ifeq ($(BUILD_OS),rhel6)
  kverrel = 2.6.32-71.el6
  dist := $(or $(dist),.el6)
endif
ifeq ($(BUILD_OS),rhel7)
  kverrel = 3.10.0-123.el7
  dist := $(or $(dist),.el7)
endif

ifdef kverrel
kdrpmfile = kernel-devel-$(kverrel).$(target_arch).rpm
krepohost = http://repo.linux.corp.yahoo.com
krepourl  = $(krepohost)/rh$(patsubst .%,%,$(dist))_kernels/$(target_arch)
kdurl     = $(krepourl)/$(kdrpmfile)
endif

url = http://twiki.corp.yahoo.com/view/Platform/Iptables-daddr

mock_cfg = $(or $(MOCK_CFG),\
	epel-$(patsubst rhel%,%,$(BUILD_OS))-$(BUILD_ARCH)-yahoo)
mock_prefix = $(Package)

mock_srpm_resultdir = results_$(uniqid)-srpm
mock_rpm_resultdir  = results_$(uniqid)-rpm

extra_mock_args = \
	-r $(mock_cfg)

extra_mock_srpm_args = \
	$(extra_mock_args) \
	--uniqueext=$(mock_prefix)-srpm \
	--target=noarch

extra_mock_rpm_base_args = \
	$(extra_mock_args) \
	--uniqueext=$(mock_prefix)-rpm \
	--target=$(target_arch)

extra_mock_rpm_args = \
	$(extra_mock_rpm_base_args) \
	--no-clean \
	--no-cleanup-after

local_mock_rpm_base_args = \
	$(extra_mock_rpm_base_args) \
	--resultdir='mock/$(mock_rpm_resultdir)'

local_mock_rpm_init_args = \
	$(local_mock_rpm_base_args)

local_mock_rpm_args = \
	$(local_mock_rpm_base_args) \
	--no-clean

def_deploy_rpms_args = -f

mock_make_macro_args = \
	BUILD_NUMBER='$(BUILD_NUMBER)' \
	MOCK_SRPM_RESULTDIR='$(mock_srpm_resultdir)' \
	MOCK_RPM_RESULTDIR='$(mock_rpm_resultdir)' \
	EXTRA_MOCK_SRPM_ARGS='$(extra_mock_srpm_args)' \
	EXTRA_MOCK_RPM_ARGS='$(extra_mock_rpm_args)' \
	$(if $(dist),DIST='$(dist)') \
	$(if $(kverrel),KVERREL='$(kverrel)') \
	URL='$(url)'

mock_prep_cookie = .mock-prep-cookie

clean_files     = $(mock_prep_cookie)
clobber_files   = $(clean_files)
distclean_files = $(clobber_files)


commit-%: BUILD_NUMBER:=$(if $(BUILD_NUMBER),0.$(BUILD_NUMBER))
commit-%: %;
component-%: def_deploy_rpms_args += -R
component-%: %;

all: pkgs

spkg pkgs: $(mock_prep_cookie)
	$(MAKE) $(mock_make_macro_args) mock-$@

publish: all
	./deploy-rpms $(def_deploy_rpms_args) \
		$(shell $(MAKE) --quiet \
			$(mock_make_macro_args) \
			mock-print_spkg mock-print_pkgs)

$(mock_prep_cookie): $(MAKEFILE_LIST)
	$(MOCK) $(local_mock_rpm_init_args) --init
ifdef kdurl
	$(MOCK) $(local_mock_rpm_args) --install '$(kdurl)'
endif
	@touch -- '$(mock_prep_cookie)'

clean clobber distclean:
	$(MAKE) $(mock_make_macro_args) mock-$@
	$(foreach f,$(wildcard $($@_files)),$(RM) -r -- '$f'$(nl))


.DEFAULT_GOAL = commit-all
.PHONY: all spkg pkgs publish clean clobber distclean
.DELETE_ON_ERROR:
